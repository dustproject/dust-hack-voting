// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { VotingSystem } from "../../systems/VotingSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type VotingSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "dev_hack_1", name: "VotingSystem" }))
VotingSystemType constant votingSystem = VotingSystemType.wrap(
  0x73796465765f6861636b5f3100000000566f74696e6753797374656d00000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title VotingSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library VotingSystemLib {
  error VotingSystemLib_CallingFromRootSystem();
  error AccessDenied(address user);
  error NotParticipant(address user);
  error AlreadySubmitted(address user);
  error NotFound(address creator);
  error NotInVotingPeriod(uint32 timestamp, uint32 votingStartTimestamp, uint32 votingEndTimestamp);
  error NoVotesLeft(address user, uint32 votesGiven, uint32 votesPerParticipant);
  error NoVotesToRevoke(address user, uint32 votesGiven);
  error SelfVoteNotAllowed(address user);

  function setModerator(VotingSystemType self, address user, bool isModerator) internal {
    return CallWrapper(self.toResourceId(), address(0)).setModerator(user, isModerator);
  }

  function setConfig(
    VotingSystemType self,
    uint32 votingStartTimestamp,
    uint32 votingEndTimestamp,
    uint32 votesPerParticipant
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).setConfig(
        votingStartTimestamp,
        votingEndTimestamp,
        votesPerParticipant
      );
  }

  function registerParticipant(VotingSystemType self, address user) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerParticipant(user);
  }

  function createSubmission(
    VotingSystemType self,
    string memory name,
    string memory githubUrl,
    string memory demoVideoUrl
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).createSubmission(name, githubUrl, demoVideoUrl);
  }

  function updateName(VotingSystemType self, string memory name) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateName(name);
  }

  function updateGithubUrl(VotingSystemType self, string memory githubUrl) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateGithubUrl(githubUrl);
  }

  function updateDemoVideoUrl(VotingSystemType self, string memory demoVideoUrl) internal {
    return CallWrapper(self.toResourceId(), address(0)).updateDemoVideoUrl(demoVideoUrl);
  }

  function vote(VotingSystemType self, address creator) internal {
    return CallWrapper(self.toResourceId(), address(0)).vote(creator);
  }

  function revokeVote(VotingSystemType self, address creator) internal {
    return CallWrapper(self.toResourceId(), address(0)).revokeVote(creator);
  }

  function setModerator(CallWrapper memory self, address user, bool isModerator) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert VotingSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setModerator_address_bool.setModerator, (user, isModerator));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setConfig(
    CallWrapper memory self,
    uint32 votingStartTimestamp,
    uint32 votingEndTimestamp,
    uint32 votesPerParticipant
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert VotingSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setConfig_uint32_uint32_uint32.setConfig,
      (votingStartTimestamp, votingEndTimestamp, votesPerParticipant)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerParticipant(CallWrapper memory self, address user) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert VotingSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_registerParticipant_address.registerParticipant, (user));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createSubmission(
    CallWrapper memory self,
    string memory name,
    string memory githubUrl,
    string memory demoVideoUrl
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert VotingSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createSubmission_string_string_string.createSubmission,
      (name, githubUrl, demoVideoUrl)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateName(CallWrapper memory self, string memory name) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert VotingSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_updateName_string.updateName, (name));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateGithubUrl(CallWrapper memory self, string memory githubUrl) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert VotingSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_updateGithubUrl_string.updateGithubUrl, (githubUrl));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function updateDemoVideoUrl(CallWrapper memory self, string memory demoVideoUrl) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert VotingSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_updateDemoVideoUrl_string.updateDemoVideoUrl, (demoVideoUrl));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function vote(CallWrapper memory self, address creator) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert VotingSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_vote_address.vote, (creator));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function revokeVote(CallWrapper memory self, address creator) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert VotingSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_revokeVote_address.revokeVote, (creator));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setModerator(RootCallWrapper memory self, address user, bool isModerator) internal {
    bytes memory systemCall = abi.encodeCall(_setModerator_address_bool.setModerator, (user, isModerator));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setConfig(
    RootCallWrapper memory self,
    uint32 votingStartTimestamp,
    uint32 votingEndTimestamp,
    uint32 votesPerParticipant
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _setConfig_uint32_uint32_uint32.setConfig,
      (votingStartTimestamp, votingEndTimestamp, votesPerParticipant)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function registerParticipant(RootCallWrapper memory self, address user) internal {
    bytes memory systemCall = abi.encodeCall(_registerParticipant_address.registerParticipant, (user));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function createSubmission(
    RootCallWrapper memory self,
    string memory name,
    string memory githubUrl,
    string memory demoVideoUrl
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createSubmission_string_string_string.createSubmission,
      (name, githubUrl, demoVideoUrl)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateName(RootCallWrapper memory self, string memory name) internal {
    bytes memory systemCall = abi.encodeCall(_updateName_string.updateName, (name));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateGithubUrl(RootCallWrapper memory self, string memory githubUrl) internal {
    bytes memory systemCall = abi.encodeCall(_updateGithubUrl_string.updateGithubUrl, (githubUrl));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function updateDemoVideoUrl(RootCallWrapper memory self, string memory demoVideoUrl) internal {
    bytes memory systemCall = abi.encodeCall(_updateDemoVideoUrl_string.updateDemoVideoUrl, (demoVideoUrl));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function vote(RootCallWrapper memory self, address creator) internal {
    bytes memory systemCall = abi.encodeCall(_vote_address.vote, (creator));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function revokeVote(RootCallWrapper memory self, address creator) internal {
    bytes memory systemCall = abi.encodeCall(_revokeVote_address.revokeVote, (creator));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(VotingSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(VotingSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(VotingSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(VotingSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(VotingSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (VotingSystemType) {
    return VotingSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(VotingSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _setModerator_address_bool {
  function setModerator(address user, bool isModerator) external;
}

interface _setConfig_uint32_uint32_uint32 {
  function setConfig(uint32 votingStartTimestamp, uint32 votingEndTimestamp, uint32 votesPerParticipant) external;
}

interface _registerParticipant_address {
  function registerParticipant(address user) external;
}

interface _createSubmission_string_string_string {
  function createSubmission(string memory name, string memory githubUrl, string memory demoVideoUrl) external;
}

interface _updateName_string {
  function updateName(string memory name) external;
}

interface _updateGithubUrl_string {
  function updateGithubUrl(string memory githubUrl) external;
}

interface _updateDemoVideoUrl_string {
  function updateDemoVideoUrl(string memory demoVideoUrl) external;
}

interface _vote_address {
  function vote(address creator) external;
}

interface _revokeVote_address {
  function revokeVote(address creator) external;
}

using VotingSystemLib for VotingSystemType global;
using VotingSystemLib for CallWrapper global;
using VotingSystemLib for RootCallWrapper global;
