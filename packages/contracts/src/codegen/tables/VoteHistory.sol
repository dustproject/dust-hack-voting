// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct VoteHistoryData {
  int32 diff;
  uint32 totalVotes;
}

library VoteHistory {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "dev_hack_1", name: "VoteHistory", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f746465765f6861636b5f3100000000566f7465486973746f72790000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0008020004040000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (address, address, uint32)
  Schema constant _keySchema = Schema.wrap(0x002c030061610300000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (int32, uint32)
  Schema constant _valueSchema = Schema.wrap(0x0008020023030000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "submission";
    keyNames[1] = "voter";
    keyNames[2] = "timestamp";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](2);
    fieldNames[0] = "diff";
    fieldNames[1] = "totalVotes";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set diff.
   */
  function setDiff(address submission, address voter, uint32 timestamp, int32 diff) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((diff)), _fieldLayout);
  }

  /**
   * @notice Set diff.
   */
  function _setDiff(address submission, address voter, uint32 timestamp, int32 diff) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((diff)), _fieldLayout);
  }

  /**
   * @notice Set totalVotes.
   */
  function setTotalVotes(address submission, address voter, uint32 timestamp, uint32 totalVotes) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((totalVotes)), _fieldLayout);
  }

  /**
   * @notice Set totalVotes.
   */
  function _setTotalVotes(address submission, address voter, uint32 timestamp, uint32 totalVotes) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((totalVotes)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(address submission, address voter, uint32 timestamp, int32 diff, uint32 totalVotes) internal {
    bytes memory _staticData = encodeStatic(diff, totalVotes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(address submission, address voter, uint32 timestamp, int32 diff, uint32 totalVotes) internal {
    bytes memory _staticData = encodeStatic(diff, totalVotes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(address submission, address voter, uint32 timestamp, VoteHistoryData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.diff, _table.totalVotes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(address submission, address voter, uint32 timestamp, VoteHistoryData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.diff, _table.totalVotes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (int32 diff, uint32 totalVotes) {
    diff = (int32(uint32(Bytes.getBytes4(_blob, 0))));

    totalVotes = (uint32(Bytes.getBytes4(_blob, 4)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (VoteHistoryData memory _table) {
    (_table.diff, _table.totalVotes) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address submission, address voter, uint32 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address submission, address voter, uint32 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(int32 diff, uint32 totalVotes) internal pure returns (bytes memory) {
    return abi.encodePacked(diff, totalVotes);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(int32 diff, uint32 totalVotes) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(diff, totalVotes);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(
    address submission,
    address voter,
    uint32 timestamp
  ) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(submission)));
    _keyTuple[1] = bytes32(uint256(uint160(voter)));
    _keyTuple[2] = bytes32(uint256(timestamp));

    return _keyTuple;
  }
}
